---
layout:     post
title:      "Leetcode #7&&(#8)&&(#9)"
subtitle:   " \"Reverse Integer\""
date:       2019-04-15 13:40 
author:     "Wei"
header-img: "img/post-20190414.jpg"
catalog: true
tags:
    - 学习
    - Leetcode





---

The hardest core of programming is algorithms.

------

### Description

#### #7 Reverse Integer

Given a 32-bit signed integer, reverse digits of an integer.

**Example 1:**

```
Input: 123
Output: 321
```

**Example 2:**

```
Input: -123
Output: -321
```

**Example 3:**

```
Input: 120
Output: 21
```

**Note:**
 Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−231,  231 − 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.

#### #8 String to Integer (atoi)

Implement `atoi` which converts a string to an integer.

The function first discards as many whitespace characters as  necessary until the first non-whitespace character is found. Then,  starting from this character, takes an optional initial plus or minus  sign followed by as many numerical digits as possible, and interprets  them as a numerical value.

The string can contain additional characters after those that form  the integral number, which are ignored and have no effect on the  behavior of this function.

If the first sequence of non-whitespace characters in str is not a  valid integral number, or if no such sequence exists because either str  is empty or it contains only whitespace characters, no conversion is  performed.

If no valid conversion could be performed, a zero value is returned.

**Note:**

- Only the space character `' '` is considered as whitespace character.
- Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−231,  231 − 1]. If the numerical value is out of the range of representable values, INT_MAX (231 − 1) or INT_MIN (−231) is returned.

**Example 1:**

```
Input: "42"
Output: 42
```

**Example 2:**

```
Input: "   -42"
Output: -42
Explanation: The first non-whitespace character is '-', which is the minus sign.
             Then take as many numerical digits as possible, which gets 42.
```

**Example 3:**

```
Input: "4193 with words"
Output: 4193
Explanation: Conversion stops at digit '3' as the next character is not a numerical digit.
```

**Example 4:**

```
Input: "words and 987"
Output: 0
Explanation: The first non-whitespace character is 'w', which is not a numerical 
             digit or a +/- sign. Therefore no valid conversion could be performed.
```

**Example 5:**

```
Input: "-91283472332"
Output: -2147483648
Explanation: The number "-91283472332" is out of the range of a 32-bit signed integer.
             Thefore INT_MIN (−231) is returned.
```

#### #9 Palindrome Number

Determine whether an integer is a palindrome. An integer is a palindrome when it reads the same backward as forward.

**Example 1:**

```
Input: 121
Output: true
```

**Example 2:**

```
Input: -121
Output: false
Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.
```

**Example 3:**

```
Input: 10
Output: false
Explanation: Reads 01 from right to left. Therefore it is not a palindrome.
```

**Follow up:**

Coud you solve it without converting the integer to a string?

------

### Algorithm

#### #7

- Use `while` loop,  `x%10` to extract remainder, `x/10` loop to get the upper bit.
- However, one must notice that reverse may cause out of 32-bit integer range. So make a decision before every time `push` current `pop`.
- The sign of input integer doesn't matter.

#### #8

- `if` empty, return 0.

- use `while` loop to detect first not whitespace character.
- `if` current char is `'+'` or `'-'` , assign `sign`.
- `if` current char is between `'0'` and `'9'`, accumulate.
- Note that integer may be out of range. Make a decision before every time accumulating.
- combine accumulation value with sign.

#### #9

- `if` x < 0, return false.
- `if` accumulation out of range, return false.

---

### C++ code

```c++
// #7 Reverse Integer  
class Solution {
public:
    int reverse(int x) {
        int y=0;
        int pop;
        while (x!=0) {
            pop = x%10;
            x = x/10;
            if ((y>INT_MAX/10)||(y==INT_MAX&&pop>7)) {
                return 0;
            }
            if ((y<INT_MIN/10)||(y==INT_MIN&&pop<(-8))) {
                return 0;
            }
            y = y*10 + pop;
        }
        return y;
       }
    
};
```

```c++
// #8 String to Integer  
class Solution {
public:
    int myAtoi(string str) {
        if (str.empty()) return 0;
        int sign = 1;
        int base = 0;
        int i =0;
        while (i<str.size()&&str[i]==' ') {
            i++;
        }
        if (i<str.size()&&(str[i]=='+'||str[i]=='-')) {
            sign = (str[i]=='+')? 1:-1;
            i++;
        }
        while (i<str.size()&&str[i]>='0'&&str[i]<='9') {
            if (base>INT_MAX/10||(base==INT_MAX/10&&str[i]-'0'>7)) {
                return (sign == 1)?INT_MAX:INT_MIN;
            }
            base = base*10 + (str[i]-'0');
            ++i;
        }
        return base*sign;
    }
};
```

```c++
// #9 Palindrome Number  
class Solution {
public:
    bool isPalindrome(int x) {
        int pop;
        int base = 0;
        int temp = x;
        if (x<0) {return false;}
        while(x!=0) {
            pop = x%10;
            x = x/10;
           if (base>INT_MAX/10||(base == INT_MAX/10&&pop>7)) {
               return false;
           }
            base = base*10 + pop;
        }
        return (base == temp);
    }
};
```

---

### Note

- The common point of three problems is make a decision before every time accumulating. What is interesting is decision condition `(base>INT_MAX/10||(base == INT_MAX/10&&pop>7))` .
- Sign doesn't influence the result of `x/10`, so it's of no sense to seperate positive and negative number. But in #8, it's of sense, because we process every bit one by one, not process `x/10` with the whole number. 