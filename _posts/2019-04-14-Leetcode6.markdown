---
layout:     post
title:      "Leetcode #6"
subtitle:   " \"ZigZag Conversion\""
date:       2019-04-14 12:00:00
author:     "Wei"
header-img: "img/post-20190414.jpg"
catalog: true
tags:
    - 学习
    - Leetcode




---

The hardest core of programming is algorithms.

------

### Description

The string `"PAYPALISHIRING"` is written in a zigzag  pattern on a given number of rows like this: (you may want to display  this pattern in a fixed font for better legibility)

```
P   A   H   N
A P L S I I G
Y   I   R
```

And then read line by line: `"PAHNAPLSIIGYIR"`

Write the code that will take a string and make this conversion given a number of rows:

```
string convert(string s, int numRows);
```

**Example 1:**

```
Input: s = "PAYPALISHIRING", numRows = 3
Output: "PAHNAPLSIIGYIR"
```

------

### Algorithm

- If input numRows is 1, return s;
- Initialize an int array `palin` which stands for palindrome to save the line where the correspond char in s is in after ZigZag conversion, e.g. in example `palin[0]= 0` because `s[0]`: 'p' is in the first line after conversion. 
- Find all chars in s that are in one line and assign them to string `t`.

---

### C++ code

```c++
class Solution {
public:
    string convert(string s, int numRows) {
        if (numRows == 1) {
            return s;
        }
        int palin[s.size()];
        string t;
        int j = 0;
        for (int i=0;i<s.size();i++){
            if (j%2==0) {
                palin[i] = i%(2*(numRows-1));
            }
            else {
                if (i%(2*(numRows-1))==0) {
                    palin[i] = 0;
                }
                else {
                   palin[i] = numRows - 1 - (i%(numRows-1)); 
                }   
            }
            if ((i!=0)&&(i%(numRows-1) == 0)){
                j = j + 1;
            }
        }
        for (int i=0;i<numRows; i++) {
            for (j = 0; j<s.size();j++) {
                if (palin[j]==i) {
                    t.append(1, s[j]);
                }
            }
        }
        return t;  
    }
};
```

---

### Note

At first I wrote these lines like this:

```c++
int count = 0;
for (int i=0;i<numRows; i++) {
            for (j = 0; j<s.size();j++) {
                if (palin[j]==i) {
                    t[count] = s[j];
                    count++;
                }
            }
        }
```

It causes an ERROR stack-buffer-overflow.

That confused me for a long time. After changed it into `t.append(1, s[j]);`, it's figured out.

I don't know why lol. It seems that `append` function takes much more less memory stacks than searching for j-th item of t.