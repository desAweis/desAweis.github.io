---
layout:     post
title:      "Leetcode #38"
subtitle:   " \"Count and Say(some points about function recursion and C++ reference) \""
date:       2019-04-25 13:36 
author:     "Wei"
header-img: "img/post-20190414.jpg"
catalog: true
tags:
    - 学习
    - Leetcode






---

The hardest core of programming is algorithms.

------

### Description

#### #38 Count and Say

The count-and-say sequence is the sequence of integers with the first five terms as following:

```
1.     1
2.     11
3.     21
4.     1211
5.     111221
```

`1` is read off as `"one 1"` or `11`.

 `11` is read off as `"two 1s"` or `21`.

 `21` is read off as `"one 2`, then `one 1"` or `1211`.

Given an integer *n* where 1 ≤ *n* ≤ 30, generate the *n*th term of the count-and-say sequence.

Note: Each term of the sequence of integers will be represented as a string.

 

**Example 1:**

```
Input: 1
Output: "1"
```

**Example 2:**

```
Input: 4
Output: "1211"
```

**Note:**
To generate the *n*th term, just *count and say* the *n*-1th term.

------

### Algorithm

Simple recursion.

------

### C++ code

```c++
class Solution {
public:
    string countAndSay(int n) {
        string s;
        if (n == 1) {
            return "1";
        }
        const string& x = countAndSay(n - 1);
        int i = 0;
        while (i < x.size()) {
            int j = 0;
            int c = x[i];
            while (x[i] == c&&i<x.size()) {
                i++;
                j++;
            }
            s += (to_string(j));
            s += x[i-1];
        }
        return s;
    }
};
```

------

### Note

- Some inner variables should be declared after calling recursion function, because in each round the inner variables may change values, so that they're not the value we want to initialize.
- It's better to save return value of last recursion using reference, because one doesn't need to recall function every time and reference is more safe and efficient to pass arguments.

